import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/* All classes in the concurrent package are thread safe, so you can 
 * access the classes from multiple threads, and you don't have to worry 
 * about thread synchronization
*/

public class App {

	// FIFO
	private BlockingQueue<Integer> queue = new ArrayBlockingQueue<Integer>(10);

	public static void main(String[] args) {

	}

	private void producer() throws InterruptedException {
		Random random = new Random();

		while (true) {
			queue.put(random.nextInt(100)); // random integers from the range 0 - 99
		}
	}
	
	private void consumer() throws InterruptedException {
		Random random = new Random();
		
		while (true) {
			Thread.sleep(100);
			
			if (random.nextInt(10) == 0) {
				Integer value = queue.take(); // if there is nothing in the queue, take will patiently wait until there is something in the queue
				// and then it will take it and return it, which saves you a lot of effort. It doesn't consumer any resources while it's waiting 
				// or anything like that
				
				System.out.println("Taken value : " + value + " Queue size is : " + queue.size());
			}
		}
	}
}
