import java.util.LinkedList;

public class Processor {

	private LinkedList<Integer> list = new LinkedList<Integer>();
	private final int LIMIT = 10;
	private Object lock = new Object();

	public void produce() throws InterruptedException {
		// the producer thread will add items to the linkedList

		int value = 0;

		while (true) {
			synchronized (lock) {
				// whenever you have shared data, always declare it in the synchronized block
				// In other words, code that accesses shared data should be declared in the
				// synchronized block
				list.add(value++);
			}
		}
	}

	public void consume() throws InterruptedException {
		// the consumer thread will process items from the LinkedList

		while (true) {
			synchronized (true) {
			System.out.print("List size is : " + list.size());
			int value = list.removeFirst();
			System.out.println("; value is : " + value);
		}

	}

}
