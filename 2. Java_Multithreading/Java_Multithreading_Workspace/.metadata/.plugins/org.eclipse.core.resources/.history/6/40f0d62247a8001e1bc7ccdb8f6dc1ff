import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Runner {

	// NOTE: A Re-entrant lock is kind of an alternative to using the synchronized
	// keyword
	private int count = 0;
	private Lock lock = new ReentrantLock(); // this means that once the lock is acquired by a thread / once the thread
												// has locked the lock, it can lock it again if it wants to, and the
												// lock just keeps count of how many times it's been locked, and you'll
												// have to unlock it by the same number of times

	private void increment() {
		for (int index = 0; index < 1e4; index++) {
			count++;
		}
	}

	public void firstThread() throws InterruptedException {
		lock.lock(); // only one thread can lock the thread at a given time. It will work just like
						// synchronized. So if another thread tries to lock this while this has already
						// got a lock, the other thread will have to quietly wait.
		try {
			increment(); // if this throws an exception, the unlock statement will never be called, so it
							// is a good idea to handle the exception within a try-catch block
		} finally {
			lock.unlock();
		}
	}

	public void secondThread() throws InterruptedException {
		lock.lock();
		try {
			increment();
		} finally {
			lock.unlock();
		}
	}

	public void finished() {
		// This method is run after the two threads, i.e. firstThread and secondThread
		// finish
		System.out.println("Count is : " + count);
	}
}

/*
 * Advantages of using re-entrant locks instead of synchronized:
 */
